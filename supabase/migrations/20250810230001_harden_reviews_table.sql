-- Database Hardening: Reviews Table Security & Performance
-- This migration adds additional constraints, indexes, and audit trails to the reviews table

-- Add data validation constraints to reviews
alter table public.reviews
  add constraint reviews_rating_range check (rating between 1 and 100),
  add constraint reviews_review_length check (review is null or length(review) <= 2000),
  add constraint reviews_review_not_empty check (review is null or length(trim(review)) > 0);

-- Add performance indexes for reviews
create index if not exists reviews_user_id_idx on public.reviews(user_id);
create index if not exists reviews_game_id_idx on public.reviews(game_id);
create index if not exists reviews_created_at_idx on public.reviews(created_at desc);
create index if not exists reviews_rating_idx on public.reviews(rating);
create index if not exists reviews_user_game_idx on public.reviews(user_id, game_id);

-- Add audit trail for reviews table
create table if not exists public.reviews_audit (
  id bigint generated by default as identity primary key,
  review_id bigint not null,
  operation text not null check (operation in ('INSERT', 'UPDATE', 'DELETE')),
  old_data jsonb,
  new_data jsonb,
  changed_by uuid references auth.users(id),
  changed_at timestamptz default now()
);

-- Enable RLS on audit table
alter table public.reviews_audit enable row level security;

-- Only authenticated users can read audit logs
create policy "reviews_audit: read for authenticated"
  on public.reviews_audit
  for select
  using (auth.role() = 'authenticated');

-- Create audit trigger function for reviews
create or replace function public.audit_reviews_changes()
returns trigger
language plpgsql
security definer set search_path = public
as $$
begin
  if TG_OP = 'DELETE' then
    insert into public.reviews_audit (review_id, operation, old_data, changed_by)
    values (old.id, TG_OP, to_jsonb(old), auth.uid());
    return old;
  elsif TG_OP = 'UPDATE' then
    insert into public.reviews_audit (review_id, operation, old_data, new_data, changed_by)
    values (new.id, TG_OP, to_jsonb(old), to_jsonb(new), auth.uid());
    return new;
  elsif TG_OP = 'INSERT' then
    insert into public.reviews_audit (review_id, operation, new_data, changed_by)
    values (new.id, TG_OP, to_jsonb(new), auth.uid());
    return new;
  end if;
  return null;
end;
$$;

-- Create audit triggers for reviews
drop trigger if exists reviews_audit_trigger on public.reviews;
create trigger reviews_audit_trigger
  after insert or update or delete on public.reviews
  for each row execute function public.audit_reviews_changes();

-- Add indexes for audit table performance
create index if not exists reviews_audit_review_id_idx on public.reviews_audit(review_id);
create index if not exists reviews_audit_changed_at_idx on public.reviews_audit(changed_at desc);
create index if not exists reviews_audit_operation_idx on public.reviews_audit(operation);

-- Grant necessary permissions
grant select on public.reviews_audit to authenticated;
grant execute on function public.audit_reviews_changes() to authenticated;
