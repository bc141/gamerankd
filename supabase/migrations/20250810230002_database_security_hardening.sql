-- Database Security Hardening: Global Security & Performance
-- This migration adds global security measures and performance optimizations

-- Create a function to check if user is admin (for future admin operations)
create or replace function public.is_admin()
returns boolean
language sql
security definer set search_path = public
as $$
  select exists (
    select 1 from public.profiles 
    where id = auth.uid() 
    and username in ('admin', 'moderator') -- Add your admin usernames here
  );
$$;

-- Create a function to get user's profile safely
create or replace function public.get_user_profile(user_id uuid default auth.uid())
returns table (
  id uuid,
  username text,
  display_name text,
  bio text,
  avatar_url text,
  created_at timestamptz
)
language sql
security definer set search_path = public
as $$
  select p.id, p.username, p.display_name, p.bio, p.avatar_url, p.created_at
  from public.profiles p
  where p.id = user_id;
$$;

-- Create a function to get game statistics safely
create or replace function public.get_game_stats(game_id bigint)
returns table (
  total_reviews bigint,
  average_rating numeric,
  rating_distribution jsonb
)
language sql
security definer set search_path = public
as $$
  select 
    count(*) as total_reviews,
    round(avg(rating), 2) as average_rating,
    jsonb_object_agg(
      rating::text, 
      rating_count
    ) as rating_distribution
  from (
    select rating, count(*) as rating_count
    from public.reviews
    where game_id = $1
    group by rating
  ) rating_counts;
$$;

-- Add rate limiting table for API protection
create table if not exists public.rate_limits (
  id bigint generated by default as identity primary key,
  user_id uuid references auth.users(id) on delete cascade,
  ip_address inet,
  endpoint text not null,
  request_count integer default 1,
  window_start timestamptz default now(),
  created_at timestamptz default now(),
  unique(user_id, endpoint, window_start),
  unique(ip_address, endpoint, window_start)
);

-- Enable RLS on rate limits
alter table public.rate_limits enable row level security;

-- Only system can manage rate limits
create policy "rate_limits: system only"
  on public.rate_limits
  for all
  using (false); -- No direct access, only through functions

-- Create rate limiting function
create or replace function public.check_rate_limit(
  endpoint_name text,
  max_requests integer default 100,
  window_minutes integer default 60
)
returns boolean
language plpgsql
security definer set search_path = public
as $$
declare
  current_count integer;
  window_start timestamptz;
begin
  window_start := now() - (window_minutes || ' minutes')::interval;
  
  -- Clean old records
  delete from public.rate_limits 
  where window_start < $2;
  
  -- Get current count
  select coalesce(sum(request_count), 0) into current_count
  from public.rate_limits
  where endpoint = endpoint_name
    and window_start >= $2
    and (user_id = auth.uid() or ip_address = inet_client_addr());
  
  -- Check if limit exceeded
  if current_count >= max_requests then
    return false;
  end if;
  
  -- Increment counter
  insert into public.rate_limits (user_id, ip_address, endpoint, request_count, window_start)
  values (auth.uid(), inet_client_addr(), endpoint_name, 1, now())
  on conflict (coalesce(user_id, '00000000-0000-0000-0000-000000000000'::uuid), endpoint, window_start)
  do update set request_count = rate_limits.request_count + 1;
  
  return true;
end;
$$;

-- Create materialized view for game statistics (performance optimization)
create materialized view if not exists public.game_stats_mv as
select 
  g.id as game_id,
  g.name,
  g.igdb_id,
  count(r.id) as total_reviews,
  round(avg(r.rating), 2) as average_rating,
  min(r.created_at) as first_review_at,
  max(r.created_at) as last_review_at
from public.games g
left join public.reviews r on g.id = r.game_id
group by g.id, g.name, g.igdb_id;

-- Create unique index on materialized view
create unique index if not exists game_stats_mv_game_id_idx on public.game_stats_mv(game_id);

-- Create function to refresh materialized view
create or replace function public.refresh_game_stats()
returns void
language sql
security definer set search_path = public
as $$
  refresh materialized view public.game_stats_mv;
$$;

-- Grant permissions
grant select on public.game_stats_mv to authenticated, anon;
grant execute on function public.is_admin() to authenticated;
grant execute on function public.get_user_profile(uuid) to authenticated;
grant execute on function public.get_game_stats(bigint) to authenticated, anon;
grant execute on function public.check_rate_limit(text, integer, integer) to authenticated, anon;
grant execute on function public.refresh_game_stats() to authenticated;

-- Add database-level security settings
-- Set statement timeout to prevent long-running queries
alter database postgres set statement_timeout = '30s';

-- Set work_mem for better performance
alter database postgres set work_mem = '16MB';

-- Set random_page_cost for SSD optimization
alter database postgres set random_page_cost = 1.1;
