-- Database Hardening: Games Table Security & Performance
-- This migration adds RLS policies, indexes, and constraints to the games table

-- Enable RLS on games table (CRITICAL SECURITY FIX)
alter table public.games enable row level security;

-- RLS Policies for games table
-- Anyone can read games (public data)
create policy "games: read for all"
  on public.games
  for select
  using (true);

-- Only authenticated users can insert games (for admin operations)
create policy "games: insert for authenticated"
  on public.games
  for insert
  with check (auth.role() = 'authenticated');

-- Only authenticated users can update games (for admin operations)
create policy "games: update for authenticated"
  on public.games
  for update
  using (auth.role() = 'authenticated')
  with check (auth.role() = 'authenticated');

-- Only authenticated users can delete games (for admin operations)
create policy "games: delete for authenticated"
  on public.games
  for delete
  using (auth.role() = 'authenticated');

-- Add performance indexes for frequently queried columns
create index if not exists games_name_idx on public.games using gin (to_tsvector('english', name));
create index if not exists games_igdb_id_idx on public.games(igdb_id);
create index if not exists games_created_at_idx on public.games(created_at desc);
create index if not exists games_name_trgm_idx on public.games using gin (name gin_trgm_ops);

-- Add data validation constraints
alter table public.games
  add constraint games_name_length check (length(name) >= 1 and length(name) <= 255),
  add constraint games_cover_url_format check (cover_url is null or cover_url ~ '^https?://'),
  add constraint games_summary_length check (summary is null or length(summary) <= 5000),
  add constraint games_release_year_range check (release_year is null or (release_year >= 1970 and release_year <= 2030)),
  add constraint games_aliases_length check (aliases is null or array_length(aliases, 1) <= 10);

-- Add audit trail for games table
create table if not exists public.games_audit (
  id bigint generated by default as identity primary key,
  game_id bigint not null,
  operation text not null check (operation in ('INSERT', 'UPDATE', 'DELETE')),
  old_data jsonb,
  new_data jsonb,
  changed_by uuid references auth.users(id),
  changed_at timestamptz default now()
);

-- Enable RLS on audit table
alter table public.games_audit enable row level security;

-- Only authenticated users can read audit logs
create policy "games_audit: read for authenticated"
  on public.games_audit
  for select
  using (auth.role() = 'authenticated');

-- Create audit trigger function
create or replace function public.audit_games_changes()
returns trigger
language plpgsql
security definer set search_path = public
as $$
begin
  if TG_OP = 'DELETE' then
    insert into public.games_audit (game_id, operation, old_data, changed_by)
    values (old.id, TG_OP, to_jsonb(old), auth.uid());
    return old;
  elsif TG_OP = 'UPDATE' then
    insert into public.games_audit (game_id, operation, old_data, new_data, changed_by)
    values (new.id, TG_OP, to_jsonb(old), to_jsonb(new), auth.uid());
    return new;
  elsif TG_OP = 'INSERT' then
    insert into public.games_audit (game_id, operation, new_data, changed_by)
    values (new.id, TG_OP, to_jsonb(new), auth.uid());
    return new;
  end if;
  return null;
end;
$$;

-- Create audit triggers
drop trigger if exists games_audit_trigger on public.games;
create trigger games_audit_trigger
  after insert or update or delete on public.games
  for each row execute function public.audit_games_changes();

-- Add indexes for audit table performance
create index if not exists games_audit_game_id_idx on public.games_audit(game_id);
create index if not exists games_audit_changed_at_idx on public.games_audit(changed_at desc);
create index if not exists games_audit_operation_idx on public.games_audit(operation);

-- Grant necessary permissions
grant select on public.games_audit to authenticated;
grant execute on function public.audit_games_changes() to authenticated;
